Rem Copyright (c) 1990 by Oracle Corporation
Rem NAME
REM    UTLSAMPL.SQL
Rem  FUNCTION
Rem  NOTES
Rem  MODIFIED
Rem	gdudey	   06/28/95 -  Modified for desktop seed database
Rem	glumpkin   10/21/92 -  Renamed from SQLBLD.SQL
Rem	blinden   07/27/92 -  Added primary and foreign keys to EMP and DEPT
Rem	rlim	   04/29/91 -	      change char to varchar2
Rem	mmoore	   04/08/91 -	      use unlimited tablespace priv
Rem	pritto	   04/04/91 -	      change SYSDATE to 13-JUL-87
Rem   Mendels	 12/07/90 - bug 30123;add to_date calls so language independent
Rem
rem
rem $Header: utlsampl.sql 7020100.1 94/09/23 22:14:24 cli Generic<base> $ sqlbld.sql
rem
SET TERMOUT OFF
SET ECHO OFF

rem CONGDON    Invoked in RDBMS at build time.	 29-DEC-1988
rem OATES:     Created: 16-Feb-83

GRANT CONNECT,RESOURCE,UNLIMITED TABLESPACE TO SCOTT IDENTIFIED BY TIGER;
ALTER USER SCOTT DEFAULT TABLESPACE USERS;
ALTER USER SCOTT TEMPORARY TABLESPACE TEMP;
CONNECT SCOTT/TIGER
DROP TABLE DEPT;
CREATE TABLE DEPT
       (DEPTNO NUMBER(2) CONSTRAINT PK_DEPT PRIMARY KEY,
	DNAME VARCHAR2(14) ,
	LOC VARCHAR2(13) ) ;
DROP TABLE EMP;
CREATE TABLE EMP
       (EMPNO NUMBER(4) CONSTRAINT PK_EMP PRIMARY KEY,
	ENAME VARCHAR2(10),
	JOB VARCHAR2(9),
	MGR NUMBER(4),
	HIREDATE DATE,
	SAL NUMBER(7,2),
	COMM NUMBER(7,2),
	DEPTNO NUMBER(2) CONSTRAINT FK_DEPTNO REFERENCES DEPT);
INSERT INTO DEPT VALUES
	(10,'ACCOUNTING','NEW YORK');
INSERT INTO DEPT VALUES (20,'RESEARCH','DALLAS');
INSERT INTO DEPT VALUES
	(30,'SALES','CHICAGO');
INSERT INTO DEPT VALUES
	(40,'OPERATIONS','BOSTON');
INSERT INTO EMP VALUES
(7369,'SMITH','CLERK',7902,to_date('17-12-1980','dd-mm-yyyy'),800,NULL,20);
INSERT INTO EMP VALUES
(7499,'ALLEN','SALESMAN',7698,to_date('20-2-1981','dd-mm-yyyy'),1600,300,30);
INSERT INTO EMP VALUES
(7521,'WARD','SALESMAN',7698,to_date('22-2-1981','dd-mm-yyyy'),1250,500,30);
INSERT INTO EMP VALUES
(7566,'JONES','MANAGER',7839,to_date('2-4-1981','dd-mm-yyyy'),2975,NULL,20);
INSERT INTO EMP VALUES
(7654,'MARTIN','SALESMAN',7698,to_date('28-9-1981','dd-mm-yyyy'),1250,1400,30);
INSERT INTO EMP VALUES
(7698,'BLAKE','MANAGER',7839,to_date('1-5-1981','dd-mm-yyyy'),2850,NULL,30);
INSERT INTO EMP VALUES
(7782,'CLARK','MANAGER',7839,to_date('9-6-1981','dd-mm-yyyy'),2450,NULL,10);
INSERT INTO EMP VALUES
(7788,'SCOTT','ANALYST',7566,to_date('13-JUL-87')-85,3000,NULL,20);
INSERT INTO EMP VALUES
(7839,'KING','PRESIDENT',NULL,to_date('17-11-1981','dd-mm-yyyy'),5000,NULL,10);
INSERT INTO EMP VALUES
(7844,'TURNER','SALESMAN',7698,to_date('8-9-1981','dd-mm-yyyy'),1500,0,30);
INSERT INTO EMP VALUES
(7876,'ADAMS','CLERK',7788,to_date('13-JUL-87')-51,1100,NULL,20);
INSERT INTO EMP VALUES
(7900,'JAMES','CLERK',7698,to_date('3-12-1981','dd-mm-yyyy'),950,NULL,30);
INSERT INTO EMP VALUES
(7902,'FORD','ANALYST',7566,to_date('3-12-1981','dd-mm-yyyy'),3000,NULL,20);
INSERT INTO EMP VALUES
(7934,'MILLER','CLERK',7782,to_date('23-1-1982','dd-mm-yyyy'),1300,NULL,10);
DROP TABLE BONUS;
CREATE TABLE BONUS
	(
	ENAME VARCHAR2(10)	,
	JOB VARCHAR2(9)  ,
	SAL NUMBER,
	COMM NUMBER
	) ;
DROP TABLE SALGRADE;
CREATE TABLE SALGRADE
      ( GRADE NUMBER,
	LOSAL NUMBER,
	HISAL NUMBER );
INSERT INTO SALGRADE VALUES (1,700,1200);
INSERT INTO SALGRADE VALUES (2,1201,1400);
INSERT INTO SALGRADE VALUES (3,1401,2000);
INSERT INTO SALGRADE VALUES (4,2001,3000);
INSERT INTO SALGRADE VALUES (5,3001,9999);
COMMIT;

SET TERMOUT ON
SET ECHO ON
--1 MOSTRAR EL NOMBRE DE EMPLEADO Y EL NOMBRE DEL DPTO AL QUE PERTENECEN
SELECT e.ENAME AS "Nombre Empleado", d.DNAME AS "Nombre Departamento"
FROM EMP e
INNER JOIN DEPT d ON e.DEPTNO = d.DEPTNO;
--2 MOSTRAR EL PRODUCTO CARTESIANO DE LAS TABLAS EMP Y DEPT, MOSTRANDO UNICAMENTE LOS REGISTROS QUE EL NOMBRE DE EMPLEADO EMPICE POR M.
SELECT e.*, d.*
FROM EMP e, DEPT d
WHERE e.ENAME LIKE 'M%'
--3 MOSTRAR LAS FILAS DEL PRODUCTO CARTESIANO QUE CUMPLAN QUE LA SUMA DE LAS LONGITUDES DE LOS NOMBRES DE EMPLEADO Y DEPARTAMENTO SEAN MANORES QUE 10 CARACTERES.
SELECT e.*, d.*
FROM EMP e, DEPT d
WHERE LENGTH(e.ENAME) + LENGTH(d.DNAME) < 10;
--4 SE PRETENDE ORGANIZAR UN TORNEO ENTRE TODOS LOS MANAGER. MOSTRAR UN LISTADO DE LOS PARTIDOS CON EL NOMBRE DE LOS MANAGER.
SELECT e1.ENAME AS "Manager 1", e2.ENAME AS "Manager 2"
FROM EMP e1
JOIN EMP e2 ON e1.JOB = 'MANAGER' AND e2.JOB = 'MANAGER' AND e1.EMPNO <> e2.EMPNO;
--5 MOSTRAR LAS PAREJAS FORMADAS POR UN MANAGER Y UN EMPLEADO CUALQUIERA CUYA SUMA DE SALARIOS SEA MENOR QUE 3500
SELECT m.ENAME AS "Manager", e.ENAME AS "Empleado", (m.SAL + e.SAL) AS "Suma de Salarios"
FROM EMP m, EMP e
WHERE m.JOB = 'MANAGER' AND (m.SAL + e.SAL) < 3500 AND m.EMPNO <> e.EMPNO;
--6 MOSTRAR LAS COMBINACIONES DE NOMBRES DE DPTO, USANDO CROSS JOIN
SELECT d1.DNAME AS "Departamento 1", d2.DNAME AS "Departamento 2"
FROM DEPT d1
CROSS JOIN DEPT d2;
--7 MOSTRAR NOMBRE DE EMPLEADO, SALARIO, NOMBRE DE DPTO Y LOCALIZACION
SELECT ENAME, SAL, DNAME
SELECT e.ENAME AS "Nombre Empleado", e.SAL AS "Salario", d.DNAME AS "Nombre Departamento", d.LOC AS "Localización"
FROM EMP e
JOIN DEPT d ON e.DEPTNO = d.DEPTNO;
--8 NOMBRE Y SALARIO DE LOS EMPLEADOS QUE TRABAJAN EN NEW YORK
SELECT E.ENAME, E.SAL, D.LOC FROM EMP E JOIN DEPT D ON E.DEPTNO = D.DEPTNO WHERE D.LOC='NEW YORK'; 
--9 CUANTOS EMPLEADOS TRABAJAN EN CADA CIUDAD?
SELECT d.LOC AS "Ciudad", COUNT(e.EMPNO) AS "Número de Empleados"
FROM DEPT d
JOIN EMP e ON d.DEPTNO = e.DEPTNO
GROUP BY d.LOC;
--10 MOSTRAR EN QUE CIUDADES TRABAJAN MAS DE TRES EMPLEADOS.
SELECT D.LOC AS "CIUDAD", COUNT(E.EMPNO) AS "NUMERO DE EMPLEADOS" FROM DEPT D JOIN EMP E ON D.DEPTNO=E.DEPTNO GROUP BY D.LOC HAVING COUNT(E.EMPNO)>3;
--11 MOSTRAR NOMBRE, OFICIO Y NOMBRE DEL DEPARTAMENTO DE LOS EMPLEADOS QUE ENTRARON EN LA COMPA�IA EN 1,981.
SELECT E.ENAME, E.JOB, D.DNAME  FROM DEPT D JOIN EMP E ON D.DEPTNO= E.DEPTNO WHERE EXTRACT(YEAR FROM E.HIREDATE)=1981;
--12 MOSTRAR UN INFORME QUE MUESTRE EL NOMBRE DEL DPTO Y CUANTOS CLERK HAY EN EL.
SELECT D.DNAME, COUNT(E.EMPNO) FROM DEPT D JOIN EMP E ON D.DEPTNO=E.DEPTNO WHERE E.JOB='CLERK' GROUP BY D.DNAME;
--13 MOSTRAR PARA CADA NOMBRE DE DPTO CUANTOS MANAGER Y CUANTOS ANALYST HAY
SELECT 
    d.DNAME AS "Nombre Departamento",
    SUM(CASE WHEN e.JOB = 'MANAGER' THEN 1 ELSE 0 END) AS "Cantidad de Managers",
    SUM(CASE WHEN e.JOB = 'ANALYST' THEN 1 ELSE 0 END) AS "Cantidad de Analysts"
FROM DEPT d
LEFT JOIN EMP e ON d.DEPTNO = e.DEPTNO
GROUP BY d.DNAME;
--14  MOSTRAR PARA CADA NOMBRE DE DPTO CUANTOS EMPLEADOS HAY DE CADA OFICIO
SELECT 
    d.DNAME AS "Nombre Departamento",
    e.JOB AS "Oficio",
    COUNT(e.EMPNO) AS "Cantidad de Empleados"
FROM DEPT d
LEFT JOIN EMP e ON d.DEPTNO = e.DEPTNO
GROUP BY d.DNAME, e.JOB;
--15 MOSTRAR EL NOMBRE DEL EMPLEADO Y EL NOMBRE DE SU JEFE
SELECT 
    e.ENAME AS "Nombre Empleado",
    m.ENAME AS "Nombre Jefe"
FROM EMP e
LEFT JOIN EMP m ON e.MGR = m.EMPNO;
 /*SUBCONSULTAS*/
--1 MOSTRAR EL NOMBRE DE LOS COMPAñEROS DE DEPARTAMENTO DE BLAKE
select e.ename
from emp e
inner join emp b on e.deptno=b.deptno
where b.ename = 'BLAKE' and e.ename <>'BLAKE';
--2 MOSTRAR TODOS LOS EMPLEADOS QUE TIENEN EL MISMO OFICIO QUE ADAMS.
select *
from emp
where job=(select job from emp where ename='ADAMS');
--3 MOSTRAR QUE EMPLEADOS GANAN MAS QUE JAMES.
select *
from emp 
where SAL>(select SAL from emp where ename='JAMES');
--4 MOSTRAR TODOS LOS EMPLEADOS QUE TRABAJAN EN DALLAS.
select *
from emp 
where DEPTNO IN (Select deptno from dept where loc='DALLAS');
--5 MOSTRAR LOS EMPLEADOS QUE TIENEN COMO SUPERIOR A CLARCK
select *
from emp
where MGR=(select EMPNO from EMP where ename='CLARK');
--6 MOSTRAR TODOS LOS EMPLEADOS QUE ESTAN POR ENCIMA DE LA MEDIA SALARIAL
select *
from emp
where SAL>(select avg(sal)from emp);
--7 MOSTRAR EL EMPLEADO QUE MENOS GANA DE CADA OFICIO ORDENADOS POR POR SALARIO
SELECT E.*
FROM EMP E
JOIN (
    SELECT JOB, MIN(SAL) AS MIN_SAL
    FROM EMP
    GROUP BY JOB
) MIN_SALARY_EMP
ON E.JOB = MIN_SALARY_EMP.JOB AND E.SAL = MIN_SALARY_EMP.MIN_SAL
ORDER BY E.SAL;
--8. MOSTRAR EL EMPLEADO MAS ANTIGUO DE CADA DPTO.
SELECT EMP.*
FROM EMP
JOIN (
    SELECT DEPTNO, MIN(HIREDATE) AS MIN_HIREDATE
    FROM EMP
    GROUP BY DEPTNO
) MIN_HIREDATE_EMP
ON EMP.DEPTNO = MIN_HIREDATE_EMP.DEPTNO AND EMP.HIREDATE = MIN_HIREDATE_EMP.MIN_HIREDATE;
--9  PARA CADA UNO DE LOS OFICIOS, MOSTRAR LOS EMPLEADOS QUE TIENEN MAYOR CATEGORIA SALARIAL
SELECT *
FROM (
    SELECT 
        EMP.*,
        ROW_NUMBER() OVER (PARTITION BY JOB ORDER BY SAL DESC) AS row_num
    FROM EMP
) ranked_employees
WHERE row_num = 1;
--10 MOSTRAR LO EMPLEADOS CON LA MINIMA CATEGORIA SALARIAL DE CADA UNO DE LOS DPTOS.
 SELECT *
FROM EMP e
WHERE (e.DEPTNO, e.SAL) IN (SELECT DEPTNO, MIN(SAL) FROM EMP GROUP BY DEPTNO);

 
--11 MOSTRAR EL NOMBRE DE DEPARTAMENTO, EL NOMBRE DEL EMPLEADO CON MAYOR SALARIO Y SU SALARIO.
 SELECT d.DNAME, e.ENAME, e.SAL
FROM EMP e
JOIN DEPT d ON e.DEPTNO = d.DEPTNO
WHERE (e.SAL, e.DEPTNO) IN (SELECT MAX(SAL), DEPTNO FROM EMP GROUP BY DEPTNO);

 
--12 MOSTRAR LOS NOMBRES DE LOS EMPLEADOS QUE TENGAN EL MISMO OFICIO QUE ALGUN EMPLEADO DEL DPTO 20
 
 SELECT DISTINCT e.ENAME
FROM EMP e
WHERE e.JOB IN (SELECT DISTINCT JOB FROM EMP WHERE DEPTNO = 20) AND e.DEPTNO != 20;

--13 MOSTRAR EL NOMBRE, JOB Y SALARIO QUE GANE LO MISMO QUE UN MANAGER Y NO SEA MANAGER
 SELECT ENAME, JOB, SAL
FROM EMP
WHERE SAL IN (SELECT DISTINCT SAL FROM EMP WHERE JOB = 'MANAGER')
AND JOB != 'MANAGER';

 
--14 NOMBRE Y NUMERO DE DPTO DE LOS COMPA�EROS DE ALLAN Y TURNER (EXCEPTUANDO A ALLEN Y TURNER)
 SELECT e.ENAME, e.DEPTNO
FROM EMP e
JOIN EMP m ON e.DEPTNO = m.DEPTNO AND e.ENAME != 'ALLEN' AND e.ENAME != 'TURNER'
WHERE m.ENAME IN ('ALLEN', 'TURNER');

 
--15 MOSTRAR LOS NUMEROS DE DPTO DONDE NO HAY UN ANALYST
SELECT DISTINCT DEPTNO
FROM EMP
WHERE DEPTNO NOT IN (SELECT DEPTNO FROM EMP WHERE JOB = 'ANALYST');
